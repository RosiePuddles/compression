from itertools import combinations

from main import XORsum


def bitRotate(e, l):
    last = e % 2
    return (e >> 1) + (last << (l - 1))


k = 4
n = 3
# fm = 0b111001101011010101111000  # Needs shifting
# fm = 0b011011001010100110011111  # Needs shifting

fm = 0b000100011010001011101110
# 010111011111001100000111
# 010100010000010011111011
# 011001111011110010001001
# 110011000101010101110001
# 111100010000001111001100
# 001110010111010011000111
# 101011111001000101111100
# 101111100001010111110000
# 001111110110101111000011
# 011100011100011010001100
# 010111111010100011110011
# 010100101011100000000111
# 100001110101010111110001
# 011000111000010011011000
# 111011011000000000011011
# 111110110010100000001111
# 100011111101100100110001
# 001001110101010111111101
# 110010111000011100111110
# 010001011010101101111111
# 110010001001010100111111
# 101111110111000111100101
# 011011011101101100010000
# 110110110110110100000001
# 000110011011110011110000
# 011111010101101110010011
# 100101100101110111111001
# 000100101011111111100100
# 011010111111111011000000
# 111010100111010000000000
# 111110110010100001000011
# 101100000110101100001111
# 111111100000110101100001
# 000001010111000010101101
# 000000101001111110110100
# 011011010100011110011000
# 111100000000001101100110
# 110101100111100110000010
# 101101100101110100000010
# 110101100000110100111000
# 001010110100011011111100
# 111110010001001111000110
# 100010110010110111100000
# 101111000001011101110000
# 111100110101011000000100
# 010011101011011100010001
# 110011010101101000010000
# 011100010010001111001110
# 111110000000110101100011
# 001011101101000110111010
# 110101010100001000111110
# 110100010111101000001110
# 111010111011010001000011
# 101011100101011100000000
# 111011111000010000111001
# 110011010111011110000001
# 101001000101110100001001
# 100111010110111000100000
# 010010110001010111111110
# 001110101110000110001111
# 000000101001111110110100
# 011010010100011100011111
# 100111010111101111100111
# 001001110000001111011010
# 001001011001000011111110
# 100000010101001011111100
# 100001000101110101111000
# 010111010011101111110010
# 001101011010001111101110
# 001010111011010011000000
# 100010000110001111011111
# 100011110111101000101000
# 101010000001010111000011
# 000000111110100100111111
# 101100111110011000001100
# 100001100001101100110000
# 001110111111000011000111
# 000101110011110111100000
# 010100101111111110000100
# 101110010110110000000011
# 011101010010111111001001
# 010100011100001110001110
# 110110001000110101111111
# 111101010101001110011111
# 100010110101000001110111
# 101101000110111101000001
# 101101010001101111100001
# 000000001010011101111101
# 001010001000000111110011
# 011010011100001010011110
# 011000101000101100101110
# 000100011010011101111101
# 100000000011110101100111
# 010110010010111011000000
# 000010110011010111101110
# 100000011110010100101100
# 100010111101010100111110
# 101110000111010101000111
# 010000110010011111110100
# 000100001010011101101101
# 011010001000010100011111
# 010100011000011011111010
# 101010010111010000000111
# 011011110000010111011001
# 000101011000101011011100
# 010010011110010010011111
# 001101101111100111000010
# 001010110111010011001111
# 101000010100101111111111
# 110010100110110111111000
# 011010010001001011111110
# 011011001101010110000001
# 010001001010111100011001
# 110100110110100000000111
# 101011010000011111110000
# 100011110011100111110001
# 101110000101001110000111
# 000110011011111011100001
# 010001010001011111011110
# 101111011000011101110000
# 111101010110111000001000
# 011100001100010100001111
# 100100011110101000000110
# 010011101111110010010001
# 101110100000010101101000
# 110101000000000101111111
# 100110111010100111100001
# 101010111100011100011100
# 000100011100110010111111
# 100001011100101011110000
# 011000110100111111011100
# 100010110100000111110111
# 101111110100010111101001
# 011001010100111110011000
# 100110011111010100100111
# 100011010110001111111011
# 011110010010101011001110
# 010101010010111111000001
# 000010001111010110101111
# 000100110011011111101100
# 111111010010000001001011
# 110100010111101110000011
# 010101111111100110000000
# 110000011001111100110011
# 111111010100101110010011
# 111110011010101000001110
# 110001100110111100011000
# 101100100010100101001110
# 100001111011110101101001
# 100101000011111101100011
# 111011010101011110000000
# 100101110100101001111100
# 101011100001010101100001
# 100001011101000000111111
# 010010010001011111111111
# 111111110101010100000000
# 010101111010001011111110
# 001010110111010111000000
# 100001000010000110111111
# 011010101111000111000110
# 001001111000110111110100
# 000001011101001001111100
# 111101010010011010001100
# 010001101000110110111001
# 010011101011101101110000
# 110110110110111000000001
# 010111001111010100000000
# 111011110101100110000001
# 001000101000100111110110
# 001100011000101111101110
# 000011001011010111100011
# 011101111110101010011100
# 110111111011010100100000
# 000101001000110111111001
# 110000100110111111111100
# 100001000010110111111001
# 010000110011000111111111
# 011111001001010100000000
# 111011011001000000100011
# 011010010011010111001111
# 101010100110000111111111
# 111101111010010001001111
# 101000001111110100000111
# 111101110010000001001111
# 100101000101110111111001
# 011101011001101000000000
# 000110111100000011110111
# 100011000111100111010011
# 010000011011111100010101
# 011010100001011110100000
# 001010001001000101100011
# 000100011000001111101110
# 011001101101001100011100
# 001100111010010011001111
# 101000111101100100111111
# 101011101111001111000100
# 111000111100011100010100
# 000010110101000001111111
# 110010100001110101110000
# 111010110100111000011100
# 001011011000001111111011
# 001110101001011111100100
# 110000010001101110110110
# 100011000011100101100011
# 101101111110010000001111
# 101000111000100101110111
# 000000110110111111011100
# 011101011010001011001100
# 100110100100000111110110
# 110100100100011101111100
# 000001101110111101011010
# 010101110111100111100010
# 110010011001001100111111
# 000000111110100101011110
# 011000110011010111001101
# 001000000101010110001111
# 010101001000000111111111
# 100101010010100001111101

n = 3
k = 4
if __name__ == '__main__':
    s0p = []
    for i in range(1, k + 2):
        s0p.extend([list(a) for a in list(combinations(range(k), i))])

    fs = [fm % (2 ** (2 * k)), (fm >> (2 * k)) % (2 ** (2 * k)), (fm >> (4 * k)) % (2 ** (2 * k))]

    oui = [True, True]
    for s0 in s0p:
        L = len(s0)
        for k0 in range(2 ** (k + 1) - 1):
            F0C = XORsum(k0, s0) ^ fs[0]
            for f in range(n - 1):
                done = False
                while not done:
                    for sn in s0p:
                        for kn in range(2 ** (k + 1) - 1):
                            done = XORsum(kn, sn) ^ fs[f + 1] == F0C
                            if done:
                                oui[f] = False
                                L += len(sn)
                                break
                        if done: break
            if sum(oui) == 0:
                break
        if sum(oui) == 0:
            break
    print(L)

# for _ in range(0):
#     fm = bitRotate(fm, 2 * k * n)
# fs = []
# for i in range(n):
#     fs.append((fm >> 2 * i * k) % (2 ** (2 * k)))

#
# possible = MasterPair(s0, k + 1, fs[0], n)
# for i in range(n - 1):
#     possible.children.append(BSL(s0, Key(k + 1, fs[i + 1]), possible))
#
# possible.iterate()
# print(possible.__repr__(True))
